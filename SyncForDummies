#!/bin/bash -x
#  README
:'
Version 2.1.1
-----------------------------
Credit to redditor /u/jvinch76  https://www.reddit.com/user/jvinch76 for creating the basis for this modification.
-----------------------------
Original Source https://www.reddit.com/r/pihole/comments/9gw6hx/sync_two_piholes_bash_script/
Previous Pastebin https://pastebin.com/KFzg7Uhi
-----------------------------
Reddit link https://www.reddit.com/r/pihole/comments/9hi5ls/dual_pihole_sync_20/
-----------------------------
Improvements:  check for existence of files before rsync and skip if not present, allow for remote command to be run 
without password by adding ssh keys to remote host no longer require hard coding password in this script, HAPASS removed.
-----------------------------
2.1.1 Changes - add directions for complete n00bs who never use the root account. (Pre Install Steps)
-----------------------------
Credit for Origonal version
/u/jvinch76
-----------------------------
Credit for V2
/u/LandlordTiberius
-----------------------------
Me
/u/ShawnEngland
-----------------------------

 
# Pre-Install STEPS to setup ROOT account
1.  Log into primary pihole
2.  "sudo nano /etc/passwd"
3.  change first root line to "root::0:0:root:/root:/bin/bash" (remove the X)
4.  Quit and save.
5.  Run "sudo nano /etc/ssh/sshd_config"
6.  Change "#PermitRootLogin prohibit-password" to "PermitRootLogin yes" (Remove # and add yes)
7.  Quit and save.
8.  run "sudo /etc/init.d/ssh restart"
10. Run "sudo passwd root" and change the password - Remember IT!
11. Repeat setps 1-10 on 2nd PIHOLE.

# INSTALLATION STEPS ON PRIMARY PIHOLE
1. Login to Primary Pi - run "sudo su" - this will elevate you to root.
2. type "sudo nano ~/piholesync.rsync.sh" to create file
3. cut and paste all information in this code snippet
4. edit PIHOLE2 and HAUSER to match your SECONDARY pihole settings
5. save and exit
6. type "chmod +x ~/piholesync.rsync.sh" to make file executable
 
# CREATE SSH file transfer permissions
7. type "ssh-keygen" (hit enter 3 times to accept default values)
8. type "ssh-copy-id root@192.168.2.252"  <- IP address of PiHole 2
9. type "yes"
10. type the password of your secondary pihole
 
# ENABLE REMOTE COMMANDS USING SSH Keys ON Remote pihole
11  type "cd ~/.ssh"
12. type "eval `ssh-agent`" <- this step may not be needed, depending upon what is running on your primary pihole
13. chmod 400 id_rsa.pub
14. type "ssh-add id_rsa.pub"
15. type "scp id_rsa.pub root@192.168.2.252:~/.ssh/"
16. login to secondary pihole (PIHOLE2) by typing "ssh root@192.168.2.252"
17. type "cd ~/.ssh"
18. type "cat id_rsa.pub >> authorized_keys"
19. type "exit"
# see https://www.dotkam.com/2009/03/10/run-commands-remotely-via-ssh-with-no-password/ for further information on running ssh commands remotely without a password.
 
# INSTALL CRON Job
19. type "crontab -e"
20. scroll to the bottom of the editor, and on a new blank line,
21. type "*/5 * * * * /bin/bash /root/piholesync.rsync.sh" <- this will run rsync every 5 minutes, edit per your preferences\tolerence, see https://crontab.guru/every-5-minutes for help
22. save and exit
 
# DONE
'
 
#VARS
FILES=(black.list blacklist.txt regex.list whitelist.txt lan.list) #list of files you want to sync
PIHOLEDIR=/etc/pihole #working dir of pihole
PIHOLE2=192.168.1.252 #IP of 2nd PiHole
HAUSER=root #user of second pihole
 
#LOOP FOR FILE TRANSFER
RESTART=0 # flag determine if service restart is needed
for FILE in ${FILES[@]}
do
  if [[ -f $PIHOLEDIR/$FILE ]]; then
  RSYNC_COMMAND=$(rsync -ai $PIHOLEDIR/$FILE $HAUSER@$PIHOLE2:$PIHOLEDIR)
    if [[ -n "${RSYNC_COMMAND}" ]]; then
      # rsync copied changes
      RESTART=1 # restart flagged
     # else
       # no changes
     fi
  # else
    # file does not exist, skipping
  fi
done
 
FILE="adlists.list"
RSYNC_COMMAND=$(rsync -ai $PIHOLEDIR/$FILE $HAUSER@$PIHOLE2:$PIHOLEDIR)
if [[ -n "${RSYNC_COMMAND}" ]]; then
  # rsync copied changes, update GRAVITY
  ssh $HAUSER@$PIHOLE2 "sudo -S pihole -g"
# else
  # no changes
fi
 
if [ $RESTART == "1" ]; then
  # INSTALL FILES AND RESTART pihole
ssh $HAUSER@$PIHOLE2 "sudo -S service pihole-FTL restart"
fi
